{"version":3,"sources":["components/TodoList.js","components/TodoFrom.js","App.js","reportWebVitals.js","index.js"],"names":["TodoList","props","useState","editableIndex","setEditableIndex","handleChange","e","index","parseInt","target","id","value","innerHTML","handleKey","key","handleEdit","className","listItems","map","type","onChange","handleCheckedItem","checked","isChecked","onKeyDown","onClick","style","color","position","right","handleDelete","TodoFrom","data","localStorage","getItem","JSON","parse","items","checkedItems","input","setinput","setItems","setCheckedItems","splice","useEffect","setItem","stringify","onSubmit","preventDefault","placeholder","name","prevItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a3c6076.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TodoList.css\";\r\nimport { RiDeleteBin6Line } from 'react-icons/ri';\r\n\r\nconst TodoList = (props) => {\r\n    const [editableIndex, setEditableIndex] = useState({})\r\n    const handleChange = (e) => {\r\n        setEditableIndex({\r\n            index: parseInt(e.target.id),\r\n            value: e.target.innerHTML || e.target.value\r\n\r\n        })\r\n    }\r\n    const handleKey = (e) => {\r\n        if (e.key === 'Enter') {\r\n            props.handleEdit(editableIndex.index, editableIndex.value)\r\n            setEditableIndex({})\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"To-do-list\">\r\n            {props.listItems.map((value, index) => {\r\n                return (\r\n                    <div className=\"div-container\" key={index} >\r\n\r\n                        <input id={index} type=\"checkbox\" onChange={props.handleCheckedItem} checked={props.isChecked}></input>\r\n                        {\r\n\r\n                            props.isChecked === true ?\r\n                                <label><s>{value}</s></label> :\r\n                                index === editableIndex.index ?\r\n                                    <input type=\"text\" id={index} value={editableIndex.value} onChange={handleChange} onKeyDown={handleKey} /> :\r\n                                    <label id={index} onClick={handleChange}>{value}</label> }\r\n                        {props.isChecked === false ?  \r\n                        < RiDeleteBin6Line id={index} style={{ color:\"red\",position:\"absolute\",right:\"20px\"}} onClick={props.handleDelete}/>:null\r\n                }\r\n\r\n                    </div>\r\n                    \r\n                )\r\n                \r\n            })\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default TodoList;","import React, { useState, useEffect , Fragment } from \"react\";\r\nimport TodoList from './TodoList';\r\nimport \"./TodoFrom.css\";\r\n\r\nconst getDataFromLocalStorage = () => {\r\n    let data = localStorage.getItem('data')\r\n    if (data) {\r\n        return JSON.parse(localStorage.getItem('data'));\r\n    }\r\n    else {\r\n        return {\r\n            items: [],\r\n            checkedItems: []\r\n        };\r\n    }\r\n}\r\nconst TodoFrom = () => {\r\n    const data = getDataFromLocalStorage()\r\n    const [input, setinput] = useState('');\r\n    const [items, setItems] = useState(data.items);\r\n    const [checkedItems, setCheckedItems] = useState(data.checkedItems);\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n    };\r\n    const handleInput = (e) => {\r\n        setinput(e.target.value);\r\n\r\n    }\r\n    const handleClick = () => {\r\n        if (input === '') {\r\n            return;\r\n        }\r\n        setItems([input, ...items])\r\n    }\r\n    const handleEdit = (index, value) => {\r\n        setItems((prevItem) => {\r\n            prevItem[index] = value\r\n            return [...prevItem]\r\n        })\r\n    }\r\n    const handleCheckedItem = (e) => {\r\n        if (e.target.checked === true) {\r\n            // 1. Add the element in the checkedItems state\r\n            // 2. Remove the element from the items state\r\n            setCheckedItems([items[e.target.id], ...checkedItems])\r\n            items.splice(e.target.id, 1)\r\n        }\r\n        else {\r\n            // 1. Add the element in the items state\r\n            // 2. Remove the element from the checkedItems state\r\n            setItems([checkedItems[e.target.id], ...items])\r\n            checkedItems.splice(e.target.id, 1)\r\n        }\r\n    }\r\n    const handleClickDelete = () => {\r\n        setCheckedItems([]);\r\n    }\r\n    const handleDelete = (e)=>{\r\n        items.splice(e.target.id,1)\r\n        setItems([...items]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('data', JSON.stringify({ \"items\": items, \"checkedItems\": checkedItems }))\r\n    }, [items, checkedItems]);\r\n    return (\r\n        <Fragment>\r\n        <div>\r\n            <figure>\r\n            <figcaption>Add Your List Here</figcaption>\r\n            </figure>\r\n        </div>\r\n        <div>\r\n            <form className='Todo-from' onSubmit={handleSubmit}>\r\n                <input type='text' placeholder='Add a todo' value={input} name='text' className='Todo-input' onChange={handleInput} />\r\n                <button className='todo-button' onClick={handleClick}>Add todo</button>\r\n                <button className='delete-button' onClick={handleClickDelete}>Delete all checkedItems </button>\r\n\r\n            </form>\r\n            <h2>Pending work </h2>\r\n\r\n            <TodoList listItems={items} handleCheckedItem={handleCheckedItem} isChecked={false} handleEdit={handleEdit} handleDelete={handleDelete}/>\r\n            <h2>Completed work</h2>\r\n            <TodoList handleCheckedItem={handleCheckedItem} listItems={checkedItems} isChecked={true} handleDelete={handleDelete} />\r\n        </div>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default TodoFrom;","import './App.css';\nimport TodoFrom from './components/TodoFrom';\n\n\nfunction App() {\n  return (\n    \n\n    <div className=\"App\">\n     <TodoFrom/>\n\n     </div>\n\n\n\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}